{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"BPR_basic","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"qclMm0F480Qc"},"source":["import numpy as np\n","from collections import defaultdict\n","from tqdm import tqdm\n","import random\n","import pickle\n","from time import time"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8-Di_R9U9kqJ","executionInfo":{"status":"ok","timestamp":1637908698607,"user_tz":480,"elapsed":18413,"user":{"displayName":"Shivaank Agarwal","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12520761330791942642"}},"outputId":"1e6b4c0e-1ebe-49b1-8b38-140e7e0c5577"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"T2p-bTXd9lbn"},"source":["location =  \"drive/MyDrive/Data_dictionaries/\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8wvTe-Cu87jQ"},"source":["with open(location+'train_set.pickle', 'rb') as handle:\n","    train_set = pickle.load(handle)\n","    \n","with open(location+'validation_set.pickle', 'rb') as handle:\n","    validation_set = pickle.load(handle)\n","    \n","with open(location+'test_set.pickle', 'rb') as handle:\n","    test_set = pickle.load(handle)\n","    \n","with open(location+'user_id.pickle', 'rb') as handle:\n","    user_id = pickle.load(handle)\n","    \n","with open(location+'item_id.pickle', 'rb') as handle:\n","    item_id = pickle.load(handle)\n","    \n","with open(location+'city_id.pickle', 'rb') as handle:\n","    city_id = pickle.load(handle)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rjl76WhB9BQh"},"source":["#list containing tuples of the form (user,visited,not visited)\n","def train_samples(train_set,size = 1):\n","    user = []\n","    pos = []\n","    neg = []\n","    for k in train_set.keys():\n","        u,c = k\n","        for i in range(size):\n","            user.append(u)\n","        [pos.append(i) for i in random.sample(train_set[k][0],size)]\n","        [neg.append(i) for i in random.sample(train_set[k][1],size)]\n","    return user,pos,neg"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xv2JSmrb9HFM"},"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-u8e8JA9-256","executionInfo":{"status":"ok","timestamp":1637908999335,"user_tz":480,"elapsed":526,"user":{"displayName":"Shivaank Agarwal","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12520761330791942642"}},"outputId":"6f12acd9-6000-4808-924f-12a7bcf1a2bf"},"source":["device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","device"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["device(type='cuda', index=0)"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"xyTn2P0E9Jes"},"source":["class BPR(nn.Module):\n","    def __init__(self, user_size, item_size, dim, weight_decay):\n","        super().__init__()\n","        self.W = nn.Parameter(torch.empty(user_size, dim))\n","        self.H = nn.Parameter(torch.empty(item_size, dim))\n","        nn.init.xavier_normal_(self.W.data)\n","        nn.init.xavier_normal_(self.H.data)\n","        self.weight_decay = weight_decay\n","\n","    def forward(self, u, i, j):\n","        \"\"\"Return loss value.\n","        Args:\n","            u(torch.LongTensor): tensor stored user indexes. [batch_size,]\n","            i(torch.LongTensor): tensor stored item indexes which is prefered by user. [batch_size,]\n","            j(torch.LongTensor): tensor stored item indexes which is not prefered by user. [batch_size,]\n","        Returns:\n","            torch.FloatTensor\n","        \"\"\"\n","        u = self.W[u, :]\n","        i = self.H[i, :]\n","        j = self.H[j, :]\n","        x_ui = torch.mul(u, i).sum(dim=1)\n","        x_uj = torch.mul(u, j).sum(dim=1)\n","        x_uij = x_ui - x_uj\n","        log_prob = nn.functional.logsigmoid(x_uij).sum()\n","        regularization = self.weight_decay * (u.norm(dim=1).pow(2).sum() + i.norm(dim=1).pow(2).sum() + j.norm(dim=1).pow(2).sum())\n","        return -log_prob + regularization\n","    \n","    def recommend(self,u,c,data):\n","        \"\"\"Return recommended item list given users.\n","        Args:\n","            u(torch.LongTensor): tensor stored user indexes. [batch_size,]\n","        Returns:\n","            pred(torch.LongTensor): recommended item list sorted by preference. [batch_size, item_size]\n","        \"\"\"\n","        \n","        U = self.W[u, :]\n","        combined_r = data[(u,c)][0] + data[(u,c)][1]\n","        h = self.H[combined_r,:]\n","        x_ui = torch.matmul(U,h.t())\n","        pred = torch.argsort(x_ui)\n","        pred = [combined_r[int(i)] for i in pred[-5:].cpu().numpy()]\n","        avg_precision = len([i for i in pred if i in data[(u,c)][0]])/5\n","        return avg_precision"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MzkeXbdz9NVn"},"source":["model = BPR(len(user_id),len(item_id),50,0.01)\n","model = model.to(device)\n","optimizer = optim.SGD(model.parameters(), lr=0.0001)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1HgBFNJa9QCN"},"source":["def precision(data,model):\n","    p = 0\n","    for k in data.keys():\n","        u,c = k\n","        p += model.recommend(u,c,data)\n","    p = p/len(data)\n","    return p"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":416},"id":"kAytuyVv9Sgz","executionInfo":{"status":"error","timestamp":1637909951393,"user_tz":480,"elapsed":11362,"user":{"displayName":"Shivaank Agarwal","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12520761330791942642"}},"outputId":"6339b109-d660-4fe8-e45f-a3737dee06bb"},"source":["epochs = 100000\n","for iteration in tqdm(range(0,epochs)):\n","    u, i, j  = train_samples(train_set,5)\n","    u = torch.tensor(u).to(device)\n","    i = torch.tensor(i).to(device)\n","    j = torch.tensor(j).to(device)\n","    optimizer.zero_grad()\n","    loss = model(u, i, j)\n","    loss.backward()\n","    if iteration%1000 == 0:\n","        print(iteration,loss,precision(validation_set,model))\n","    optimizer.step()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["  0%|          | 1/100000 [00:04<120:37:06,  4.34s/it]"]},{"output_type":"stream","name":"stdout","text":["0 tensor(32615.4844, device='cuda:0', grad_fn=<AddBackward0>) 0.01904559464342638\n"]},{"output_type":"stream","name":"stderr","text":["  0%|          | 32/100000 [00:11<9:41:07,  2.87it/s]\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-31-e90eef126be5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m100000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0miteration\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtqdm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m  \u001b[0;34m=\u001b[0m \u001b[0mtrain_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_set\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mu\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-6-c738aa1cc6ae>\u001b[0m in \u001b[0;36mtrain_samples\u001b[0;34m(train_set, size)\u001b[0m\n\u001b[1;32m      9\u001b[0m             \u001b[0muser\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m         \u001b[0;34m[\u001b[0m\u001b[0mpos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_set\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m         \u001b[0;34m[\u001b[0m\u001b[0mneg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_set\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0muser\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpos\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mneg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/random.py\u001b[0m in \u001b[0;36msample\u001b[0;34m(self, population, k)\u001b[0m\n\u001b[1;32m    335\u001b[0m             \u001b[0mselected_add\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mselected\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    336\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 337\u001b[0;31m                 \u001b[0mj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandbelow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    338\u001b[0m                 \u001b[0;32mwhile\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mselected\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    339\u001b[0m                     \u001b[0mj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrandbelow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/random.py\u001b[0m in \u001b[0;36m_randbelow\u001b[0;34m(self, n, int, maxsize, type, Method, BuiltinMethod)\u001b[0m\n\u001b[1;32m    230\u001b[0m         \u001b[0;31m# Only call self.getrandbits if the original random() builtin method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    231\u001b[0m         \u001b[0;31m# has not been overridden or if a new getrandbits() was supplied.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 232\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mBuiltinMethod\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgetrandbits\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mMethod\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    233\u001b[0m             \u001b[0mk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbit_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# don't use (n-1) here because n can be 1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    234\u001b[0m             \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetrandbits\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m          \u001b[0;31m# 0 <= r < 2**k\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"pP5EIORj9VBH"},"source":["precision(train_set,model),precision(validation_set,model),precision(test_set,model)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LajrrjtC9YgG"},"source":["torch.save(model,'model2')\n","#model2 = torch.load('model2')"],"execution_count":null,"outputs":[]}]}